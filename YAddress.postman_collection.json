{
	"info": {
		"_postman_id": "1b57c359-717f-4800-8b66-e8d17d1d1dce",
		"name": "YAddress",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Valid Requests",
			"item": [
				{
					"name": "Valid address with no errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7f599e-3ee1-4a58-9453-40fd69e8676b",
								"exec": [
									"eval(pm.environment.get(\"validResponse\"))();\r",
									"eval(pm.environment.get(\"noErrorCode\"))();\r",
									"eval(pm.environment.get(\"validateAddress\"))();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0c82e76-1f0c-44c3-b475-996d482d6bdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}?AddressLine1={{ValidAddressLine1}}&AddressLine2={{ValidAddressLine2}}&UserKey={{UserKey}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "AddressLine1",
									"value": "{{ValidAddressLine1}}"
								},
								{
									"key": "AddressLine2",
									"value": "{{ValidAddressLine2}}"
								},
								{
									"key": "UserKey",
									"value": "{{UserKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid address with no errors - XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7f599e-3ee1-4a58-9453-40fd69e8676b",
								"exec": [
									"pm.test(\"response must be valid and not have json a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.not.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"response must reuturn ErrorCode: 0-No error and blank ErrorMessage\", function () {\r",
									"    var jsonData = xml2Json(responseBody);\r",
									"    pm.expect(jsonData.Address.ErrorCode).to.eql(\"0\");\r",
									"    pm.expect(jsonData.Address.ErrorMessage).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}?AddressLine1=1600 Pennsylvania Avenue NW&AddressLine2=Washington, DC 20500&UserKey",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "AddressLine1",
									"value": "1600 Pennsylvania Avenue NW"
								},
								{
									"key": "AddressLine2",
									"value": "Washington, DC 20500"
								},
								{
									"key": "UserKey",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Error Handling",
			"item": [
				{
					"name": "Error 2: Input address was supplied in an invalid format - invalid street line",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7f599e-3ee1-4a58-9453-40fd69e8676b",
								"exec": [
									"pm.test(\"response must return ErrorCode: 2-Input address was supplied in an invalid format.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ErrorCode).to.eql(2);\r",
									"    pm.expect(jsonData.ErrorMessage).to.eql(\"Invalid address: invalid street address line \");\r",
									"});\r",
									"\r",
									"eval(pm.environment.get(\"validResponse\"))();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0c82e76-1f0c-44c3-b475-996d482d6bdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}?AddressLine1=Washington &AddressLine2=Washington, DC 20016&UserKey={{UserKey}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "AddressLine1",
									"value": "Washington ",
									"description": "input swapped with Valid Address2"
								},
								{
									"key": "AddressLine2",
									"value": "Washington, DC 20016",
									"description": "input swapped with Valid Address1"
								},
								{
									"key": "UserKey",
									"value": "{{UserKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Error 2: Input address was supplied in an invalid format - no Zip or State",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7f599e-3ee1-4a58-9453-40fd69e8676b",
								"exec": [
									"pm.test(\"response must return ErrorCode: 2-Input address was supplied in an invalid format.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ErrorCode).to.eql(2);\r",
									"    pm.expect(jsonData.ErrorMessage).to.eql(\"Invalid address: no Zip or State given\");\r",
									"});\r",
									"\r",
									"eval(pm.environment.get(\"validResponse\"))();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0c82e76-1f0c-44c3-b475-996d482d6bdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}?AddressLine1={{ValidAddressLine2}}&AddressLine2={{ValidAddressLine1}}&UserKey={{UserKey}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "AddressLine1",
									"value": "{{ValidAddressLine2}}",
									"description": "input swapped with Valid Address2"
								},
								{
									"key": "AddressLine2",
									"value": "{{ValidAddressLine1}}",
									"description": "input swapped with Valid Address1"
								},
								{
									"key": "UserKey",
									"value": "{{UserKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Error 3: Specified street was not found in the ZIP code provided or in any ZIP code of the city-state",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7f599e-3ee1-4a58-9453-40fd69e8676b",
								"exec": [
									"pm.test(\"response must return ErrorCode: 3-Specified street was not found in the ZIP code provided or in any ZIP code of the city-state\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ErrorCode).to.eql(3);\r",
									"    pm.expect(jsonData.ErrorMessage).to.eql(\"Street not found in city/state\");\r",
									"});\r",
									"\r",
									"eval(pm.environment.get(\"validResponse\"))();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0c82e76-1f0c-44c3-b475-996d482d6bdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}?AddressLine1=1 Pennsylvania Avenue NW&AddressLine2=Washington,  90210&UserKey={{UserKey}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "AddressLine1",
									"value": "1 Pennsylvania Avenue NW"
								},
								{
									"key": "AddressLine2",
									"value": "Washington,  90210"
								},
								{
									"key": "UserKey",
									"value": "{{UserKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Error 4: City is not found in the state.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7f599e-3ee1-4a58-9453-40fd69e8676b",
								"exec": [
									"pm.test(\"response must return ErrorCode: 4-City not found in state\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ErrorCode).to.eql(4);\r",
									"    pm.expect(jsonData.ErrorMessage).to.eql(\"City not found in state\");\r",
									"});\r",
									"\r",
									"eval(pm.environment.get(\"validResponse\"))();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0c82e76-1f0c-44c3-b475-996d482d6bdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}?AddressLine1=1600 Pennsylvania Avenue NW&AddressLine2=New York, DC 90210&UserKey={{UserKey}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "AddressLine1",
									"value": "1600 Pennsylvania Avenue NW"
								},
								{
									"key": "AddressLine2",
									"value": "New York, DC 90210"
								},
								{
									"key": "UserKey",
									"value": "{{UserKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Error 8: No such house number in the street",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7f599e-3ee1-4a58-9453-40fd69e8676b",
								"exec": [
									"pm.test(\"response must return ErrorCode: 8-No such house number in the street\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ErrorCode).to.eql(8);\r",
									"    pm.expect(jsonData.ErrorMessage).to.eql(\"No such house number in the street\");\r",
									"});\r",
									"\r",
									"eval(pm.environment.get(\"validResponse\"))();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0c82e76-1f0c-44c3-b475-996d482d6bdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}?AddressLine1=1 Pennsylvania Avenue NW&AddressLine2=Washington, DC 20500\n&UserKey={{UserKey}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "AddressLine1",
									"value": "1 Pennsylvania Avenue NW"
								},
								{
									"key": "AddressLine2",
									"value": "Washington, DC 20500\n"
								},
								{
									"key": "UserKey",
									"value": "{{UserKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7f599e-3ee1-4a58-9453-40fd69e8676b",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0c82e76-1f0c-44c3-b475-996d482d6bdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}?AddressLine1={{ValidAddressLine1}}&AddressLine2={{ValidAddressLine2}}&UserKey={{UserKey}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "AddressLine1",
									"value": "{{ValidAddressLine1}}"
								},
								{
									"key": "AddressLine2",
									"value": "{{ValidAddressLine2}}"
								},
								{
									"key": "UserKey",
									"value": "{{UserKey}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Autocorrect",
			"item": [
				{
					"name": "City is missing in Address Line 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7f599e-3ee1-4a58-9453-40fd69e8676b",
								"exec": [
									"eval(pm.environment.get(\"validResponse\"))();\r",
									"eval(pm.environment.get(\"noErrorCode\"))();\r",
									"eval(pm.environment.get(\"validateAddress\"))();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0c82e76-1f0c-44c3-b475-996d482d6bdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}?AddressLine1={{ValidAddressLine1}}&AddressLine2=DC 20500&UserKey={{UserKey}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "AddressLine1",
									"value": "{{ValidAddressLine1}}"
								},
								{
									"key": "AddressLine2",
									"value": "DC 20500"
								},
								{
									"key": "UserKey",
									"value": "{{UserKey}}"
								}
							]
						},
						"description": "Returns valid address if City is missing in Address Line 2 Copy"
					},
					"response": []
				},
				{
					"name": "City has a typo in Address Line 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7f599e-3ee1-4a58-9453-40fd69e8676b",
								"exec": [
									"eval(pm.environment.get(\"validResponse\"))();\r",
									"eval(pm.environment.get(\"noErrorCode\"))();\r",
									"eval(pm.environment.get(\"validateAddress\"))();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0c82e76-1f0c-44c3-b475-996d482d6bdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}?AddressLine1={{ValidAddressLine1}}&AddressLine2=Waingtn, DC 20500&UserKey={{UserKey}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "AddressLine1",
									"value": "{{ValidAddressLine1}}"
								},
								{
									"key": "AddressLine2",
									"value": "Waingtn, DC 20500"
								},
								{
									"key": "UserKey",
									"value": "{{UserKey}}"
								}
							]
						},
						"description": "Returns valid address if City has a typo in Address Line 2"
					},
					"response": []
				},
				{
					"name": "State is missing in Address Line 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7f599e-3ee1-4a58-9453-40fd69e8676b",
								"exec": [
									"eval(pm.environment.get(\"validResponse\"))();\r",
									"eval(pm.environment.get(\"noErrorCode\"))();\r",
									"eval(pm.environment.get(\"validateAddress\"))();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0c82e76-1f0c-44c3-b475-996d482d6bdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}?AddressLine1=1600 Pennsylvania Avenue NW&AddressLine2=Washington, 20500&UserKey={{UserKey}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "AddressLine1",
									"value": "1600 Pennsylvania Avenue NW"
								},
								{
									"key": "AddressLine2",
									"value": "Washington, 20500"
								},
								{
									"key": "UserKey",
									"value": "{{UserKey}}"
								}
							]
						},
						"description": "Returns valid address if State is missing in Address Line 2"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c0f07625-9ad0-4bae-b2e7-6f911ff02bdd",
				"type": "text/javascript",
				"exec": [
					"var validResponse = () => {",
					"    pm.test(\"response must be valid and have a body\", function () {",
					"        pm.response.to.be.ok;",
					"        pm.response.to.be.json;",
					"    });",
					"}",
					"",
					"pm.environment.set(\"validResponse\", validResponse.toString());",
					"",
					"var noErrorCode = () => {",
					"    pm.test(\"response must reuturn ErrorCode: 0-No error and blank ErrorMessage\", function () {",
					"        var jsonData = pm.response.json();",
					"        pm.expect(jsonData.ErrorCode).to.eql(0);",
					"        pm.expect(jsonData.ErrorMessage).to.eql(\"\");",
					"    });",
					"}",
					"",
					"pm.environment.set(\"noErrorCode\", noErrorCode.toString());",
					"",
					"var validateAddress = () => {",
					"    var jsonData = pm.response.json();",
					"",
					"    function VerifyField(field){",
					"        var value = pm.collectionVariables.get(field);",
					"        pm.expect(jsonData[field]).to.eql(value);",
					"    }",
					"    ",
					"    function VerifyNumberField(field){",
					"        var value = pm.collectionVariables.get(field);",
					"        pm.expect(jsonData[field]).to.eql(Number(value));",
					"    }",
					"    ",
					"    pm.test(\"address Number must be correct\", function () {",
					"        VerifyField(\"Number\");",
					"    });",
					"    ",
					"    pm.test(\"address PreDir must be correct\", function () {",
					"        VerifyField(\"PreDir\");",
					"    });",
					"    ",
					"    pm.test(\"address Street must be correct\", function () {",
					"        VerifyField(\"Street\");",
					"    });",
					"    ",
					"    pm.test(\"address Suffix must be correct\", function () {",
					"        VerifyField(\"Suffix\");",
					"    });",
					"",
					"    pm.test(\"address PostDir must be correct\", function () {",
					"        VerifyField(\"PostDir\");",
					"    });",
					"",
					"    pm.test(\"address Sec must be correct\", function () {",
					"        VerifyField(\"Sec\");",
					"    });",
					"",
					"    pm.test(\"address SecNumber must be correct\", function () {",
					"        VerifyField(\"SecNumber\");",
					"    });",
					"",
					"    pm.test(\"address City must be correct\", function () {",
					"        VerifyField(\"City\");",
					"    });",
					"",
					"    pm.test(\"address State must be correct\", function () {",
					"        VerifyField(\"State\");",
					"    });",
					"",
					"    pm.test(\"address Zip must be correct\", function () {",
					"        VerifyField(\"Zip\");",
					"    });",
					"",
					"    pm.test(\"address Zip4 must be correct\", function () {",
					"        VerifyField(\"Zip4\");",
					"    });",
					"",
					"    pm.test(\"address County must be correct\", function () {",
					"        VerifyField(\"County\");",
					"    });",
					"",
					"    pm.test(\"address StateFP must be correct\", function () {",
					"        VerifyField(\"StateFP\");",
					"    });",
					"    ",
					"    pm.test(\"address CountyFP must be correct\", function () {",
					"        VerifyField(\"CountyFP\");",
					"    });",
					"",
					"    pm.test(\"address CensusTract must be correct\", function () {",
					"        VerifyField(\"CensusTract\");",
					"    });",
					"",
					"    pm.test(\"address CensusBlock must be correct\", function () {",
					"        VerifyField(\"CensusBlock\");",
					"    });",
					"",
					"    pm.test(\"address Latitude must be correct\", function () {",
					"        VerifyNumberField(\"Latitude\");",
					"    });",
					"",
					"    pm.test(\"address Longitude must be correct\", function () {",
					"        VerifyNumberField(\"Longitude\");",
					"    });",
					"",
					"    pm.test(\"address GeoPrecision must be correct\", function () {",
					"        VerifyNumberField(\"GeoPrecision\");",
					"    });",
					"}",
					"",
					"pm.environment.set(\"validateAddress\", validateAddress.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "66bf95c8-b822-45f8-9fae-ed8768d87a34",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "95d39fe7-8a9e-4870-acf4-12f79c9471ac",
			"key": "ValidAddressLine1",
			"value": "1600 Pennsylvania Avenue NW",
			"type": "string"
		},
		{
			"id": "f6ed76d1-210b-4692-9c78-f4513897db31",
			"key": "ValidAddressLine2",
			"value": "Washington, DC 20500",
			"type": "string"
		},
		{
			"id": "2fc3727d-54c2-41c9-b2c4-94f88e305679",
			"key": "Number",
			"value": "1600",
			"type": "string"
		},
		{
			"id": "bb5c123e-3e65-40db-b454-d53448afd21a",
			"key": "PreDir",
			"value": "",
			"type": "string"
		},
		{
			"id": "7a2cf6e2-21c0-4b83-9530-4f358eec528b",
			"key": "Street",
			"value": "PENNSYLVANIA",
			"type": "string"
		},
		{
			"id": "b9cda41e-7dd8-4f84-a613-6c5c63fcc510",
			"key": "Suffix",
			"value": "AVE",
			"type": "string"
		},
		{
			"id": "2f4b4c06-efff-4877-a5ef-c6932238eec1",
			"key": "PostDir",
			"value": "NW",
			"type": "string"
		},
		{
			"id": "befeef01-7ecf-4614-960b-0798919b609d",
			"key": "Sec",
			"value": "",
			"type": "string"
		},
		{
			"id": "b8bf0acc-382d-43c5-b808-17b9969891d5",
			"key": "SecNumber",
			"value": "",
			"type": "string"
		},
		{
			"id": "c332ac53-3321-440b-ac24-a9bfe550252e",
			"key": "City",
			"value": "WASHINGTON",
			"type": "string"
		},
		{
			"id": "d73740e2-4ce5-47bb-8ae4-4302cad4972a",
			"key": "State",
			"value": "DC",
			"type": "string"
		},
		{
			"id": "dd59a0ca-f7e1-4cd4-a0f5-c416a08775ad",
			"key": "Zip",
			"value": "20500",
			"type": "string"
		},
		{
			"id": "1181fa9f-d8de-4b65-8e49-cef85aadcd2e",
			"key": "Zip4",
			"value": "0005",
			"type": "string"
		},
		{
			"id": "a853da5d-e0ef-4964-aa54-1c266fca743a",
			"key": "County",
			"value": "DISTRICT OF COLUMBIA",
			"type": "string"
		},
		{
			"id": "0571a862-7b9a-4aed-b2f0-d9f7a0db298a",
			"key": "StateFP",
			"value": "11",
			"type": "string"
		},
		{
			"id": "d408a40f-9006-4c2a-9eb6-b889b4cc5fc9",
			"key": "CountyFP",
			"value": "001",
			"type": "string"
		},
		{
			"id": "692f7b18-76df-4a92-9188-3bb64b1eb4b5",
			"key": "CensusTract",
			"value": "",
			"type": "string"
		},
		{
			"id": "3626cfcc-300e-4b92-a7f2-9afc9eb92ca2",
			"key": "CensusBlock",
			"value": "",
			"type": "string"
		},
		{
			"id": "8e3a7764-4a91-474c-8da1-0c4f4beb3a6d",
			"key": "Latitude",
			"value": "38.909641",
			"type": "string"
		},
		{
			"id": "a9692230-73ba-42c2-939a-4f4231f3dcc9",
			"key": "Longitude",
			"value": "-77.018933",
			"type": "string"
		},
		{
			"id": "1f425a17-6677-48ed-9021-2c902a80c877",
			"key": "GeoPrecision",
			"value": "2",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}